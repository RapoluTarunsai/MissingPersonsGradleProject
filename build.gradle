plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.github.node-gradle.node' version '5.0.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'com.itextpdf:itextg:5.5.10'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.openpnp:opencv:4.5.1-2'
    implementation 'commons-io:commons-io:2.11.0'
    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.bytedeco:opencv-platform:4.5.1-1.5.5'
    implementation 'org.bytedeco:opencv:4.5.1-1.5.5'
    implementation 'org.python:jython-slim:2.7.4'
    implementation 'org.imgscalr:imgscalr-lib:4.2'

}


test {
    useJUnitPlatform()
}

node {
    version = '14.17.0'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    nodeModulesDir = file("src/main/frontend") // This sets the directory containing package.json
}
sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}
task buildReact(type: com.github.gradle.node.npm.task.NpmTask) {
    dependsOn npmInstall
    workingDir = file('src/main/frontend')
    args = ['run', 'build']
}

task copyReactBuild(type: Copy) {
    from 'src/main/frontend/build'
    into 'src/main/resources/static'
}

bootJar {
    dependsOn buildReact
    dependsOn copyReactBuild

}

processResources {
    dependsOn buildReact
    dependsOn copyReactBuild

}

task installPythonDependencies(type: Exec) {
    commandLine 'pip', 'install', 'dlib', 'scikit-image', 'numpy'
}

